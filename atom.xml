<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Karma&#39;s Blog</title>
  
  <subtitle>無財作力，少有斗智，既饒爭時，此其大經也。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://karmalove.github.io/"/>
  <updated>2019-09-02T08:40:09.124Z</updated>
  <id>https://karmalove.github.io/</id>
  
  <author>
    <name>Karma</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 单例模式</title>
    <link href="https://karmalove.github.io/2019/09/02/java-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>https://karmalove.github.io/2019/09/02/java-单例模式/</id>
    <published>2019-09-02T08:38:38.000Z</published>
    <updated>2019-09-02T08:40:09.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java单例模式"><a href="#Java单例模式" class="headerlink" title="Java单例模式"></a>Java单例模式</h1><h2 id="懒汉式单例"><a href="#懒汉式单例" class="headerlink" title="懒汉式单例"></a>懒汉式单例</h2><h3 id="1-适用于单线程环境（不推荐）"><a href="#1-适用于单线程环境（不推荐）" class="headerlink" title="1.适用于单线程环境（不推荐）"></a>1.适用于单线程环境（不推荐）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getInstance()&#123;</span><br><span class="line">if(null==instance)&#123;</span><br><span class="line">instance=new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">return instance; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-适用于多线程环境，但效率不高（不推荐）"><a href="#2-适用于多线程环境，但效率不高（不推荐）" class="headerlink" title="2.适用于多线程环境，但效率不高（不推荐）"></a>2.适用于多线程环境，但效率不高（不推荐）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static synchronized Snigleton getInstance()&#123;</span><br><span class="line">if(null==instance)&#123;</span><br><span class="line">instance=new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-双重检验锁（推荐）"><a href="#3-双重检验锁（推荐）" class="headerlink" title="3.双重检验锁（推荐）"></a>3.双重检验锁（推荐）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getInstance()&#123;</span><br><span class="line">if(null==instance)&#123;</span><br><span class="line">synchronized(Singleton.class)&#123;</span><br><span class="line">if(null==instance)&#123;</span><br><span class="line">instance=new Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-静态内部类（Effective-Java-上推荐）"><a href="#4-静态内部类（Effective-Java-上推荐）" class="headerlink" title="4.静态内部类（Effective Java 上推荐）"></a>4.静态内部类（Effective Java 上推荐）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static class SingletonHolder&#123;</span><br><span class="line">private static final Singleton INSTANCE=new Singleton();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static final Singleton getInstance()&#123;</span><br><span class="line">return SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h2><h3 id="static-final"><a href="#static-final" class="headerlink" title="static final"></a>static final</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private static final Singleton INSTANCE=new Singleton();</span><br><span class="line"></span><br><span class="line">public static final Singleton getInstance()&#123;</span><br><span class="line">return INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h2><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java单例模式&quot;&gt;&lt;a href=&quot;#Java单例模式&quot; class=&quot;headerlink&quot; title=&quot;Java单例模式&quot;&gt;&lt;/a&gt;Java单例模式&lt;/h1&gt;&lt;h2 id=&quot;懒汉式单例&quot;&gt;&lt;a href=&quot;#懒汉式单例&quot; class=&quot;headerlink
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>期权希腊值含义</title>
    <link href="https://karmalove.github.io/2019/08/26/%E6%9C%9F%E6%9D%83%E5%B8%8C%E8%85%8A%E5%80%BC%E5%90%AB%E4%B9%89/"/>
    <id>https://karmalove.github.io/2019/08/26/期权希腊值含义/</id>
    <published>2019-08-26T03:48:05.000Z</published>
    <updated>2019-09-02T08:40:09.136Z</updated>
    
    <content type="html"><![CDATA[<h3 id="期权希腊值含义及用法"><a href="#期权希腊值含义及用法" class="headerlink" title="期权希腊值含义及用法"></a>期权希腊值含义及用法</h3><blockquote><p>期权的价格与标的资产价格、标的资产波动率、期权执行价格、期权到期时间、利率等因素有关，通常用希腊字母（Greeks）表示期权价格对于上述影响因素变化的敏感程度，是期权交易中重要的风险管理指标。</p></blockquote><h4 id="常用希腊字母及其含义如下表所示："><a href="#常用希腊字母及其含义如下表所示：" class="headerlink" title="常用希腊字母及其含义如下表所示："></a>常用希腊字母及其含义如下表所示：</h4><table><thead><tr><th>名称</th><th style="text-align:center">符号</th><th>含义</th></tr></thead><tbody><tr><td>Delta</td><td style="text-align:center">Δ</td><td>标的资产价格变化引起期权价格变化</td></tr><tr><td>Gamma</td><td style="text-align:center">γ</td><td>标的资产价格变化引起delta值的变化</td></tr><tr><td>Theta</td><td style="text-align:center">θ</td><td>期权的时间价值随时间流逝耗损的速度</td></tr><tr><td>Vega</td><td style="text-align:center">ν</td><td>隐含波动率变化引起的期权价格变化</td></tr><tr><td>Rho</td><td style="text-align:center">P</td><td>期权价格对（无风险）利率变化的敏感程度</td></tr></tbody></table><h3 id="Delta值"><a href="#Delta值" class="headerlink" title="Delta值"></a>Delta值</h3><blockquote><p>Delta，又称对冲值，表示期权价格对标的资产价格变化的敏感性，即标的资产价格变动一个单位时期权价格的变化率。<br>Delta主要有以下两种用法：<br>一个是对冲作用。如果我们有着如下对冲组合：由Delta份ETF空头和1份ETF期权多头组成。当ETF价格变化0.001元时，Delta份ETF空头价格会变化-0.001<em>Delta</em>元，<em>1</em>份<em>ETF</em>期权合约价格会变化<em>0.001</em>Delta元。两者相互抵消，对冲组合的整体价格几乎不变。因此，我们可以用Delta份ETF空头去对冲1份期权。<br>另一个是计算杠杆。比如ETF上涨1%，期权上涨10%，那么期权的杠杆就是10倍。那么通过Delta，我们可以计算期权的杠杆倍数。假设目前ETF的价格是3.000元，有一份1个月后到期行权价为3.20的Call期权，现在的价格是0.1000元，Delta为0.33。如果ETF上涨1%，也就是0.030元，期权价格就会上涨0.030*Delta，等于0.01元。从涨幅来看，期权合约上涨了10%。因此，期权合约的杠杆大概是10倍。</p></blockquote><h3 id="Gamma值"><a href="#Gamma值" class="headerlink" title="Gamma值"></a>Gamma值</h3><blockquote><p>Gamma就是Delta随标的价格变化而变化的幅度。当ETF价格变化0.001元时，Delta变化0.001<em>Gamma。<br>假设对冲组合由Delta份ETF空头和1份期权多头组成，Delta会随着ETF价格变化而变化。当ETF价格发生变化时，为了保证对冲的效果，需要调整ETF的头寸Delta。当ETF价格变化0.001元时，ETF的头寸Delta也会相应的变化0.001</em>Gamma。因此，Gamma表示的是对冲风险的难度。</p></blockquote><h3 id="Theta值"><a href="#Theta值" class="headerlink" title="Theta值"></a>Theta值</h3><blockquote><p>Theta衡量的是期权时间价值的损耗。随着到期日的临近，在其他条件不变的情况下，期权的时间价值会降低。</p></blockquote><h3 id="Vega值"><a href="#Vega值" class="headerlink" title="Vega值"></a>Vega值</h3><blockquote><p>通常，不确定性越大，风险也就越高，承担风险的一方自然要求更高的补偿。在期权的世界里，预期波动率描述了人们对未来的不确定程度。类似于保费，对于预期波动比较大的资产所对应的期权，期权卖方也会收取更高的期权费。<br>Vega就是用来衡量期权价格和预期波动率之间的关系。其他因素不变，期权价格随着标的资产预期波动率的增加而上升，因此不论Call还是Put期权，Vega都是大于零的。</p></blockquote><h3 id="Rho值"><a href="#Rho值" class="headerlink" title="Rho值"></a>Rho值</h3><blockquote><p>Rho是指期权价格对无风险利率变化的敏感程度，代表着利率每改变1%，期权将会出现的变化。标的资产价格越高，距离到期日时间越长，Rho就越大。认购期权的Rho为正，认沽则为负。Rho相较于其他希腊值字母，对于期权的影响是最小的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;期权希腊值含义及用法&quot;&gt;&lt;a href=&quot;#期权希腊值含义及用法&quot; class=&quot;headerlink&quot; title=&quot;期权希腊值含义及用法&quot;&gt;&lt;/a&gt;期权希腊值含义及用法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;期权的价格与标的资产价格、标的资产波动率、期权执行
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019年中國經濟分析</title>
    <link href="https://karmalove.github.io/2019/08/21/2019%E5%B9%B4%E4%B8%AD%E5%9C%8B%E7%B6%93%E6%BF%9F%E5%88%86%E6%9E%90/"/>
    <id>https://karmalove.github.io/2019/08/21/2019年中國經濟分析/</id>
    <published>2019-08-21T08:21:29.000Z</published>
    <updated>2019-08-26T03:44:19.760Z</updated>
    
    <content type="html"><![CDATA[<p>各种数据显示当前经济处于衰退或停滞，央行最后会降低利率，令企业或企业家以比较优惠的方式贷款，此时企业负责人会计划新的投资。同样地，如果普通消费者支付的贷款利率也变低，他们便愿意贷款来买房子（<strong>注：官方多次提到房产不作为短期刺激经济手段</strong>）、汽车或其他消费品。因此，消费品的需求品就增加了。</p><p>理论上是这样运作，但是实际上的情况却是由于经济衰退和美中贸易战的不确定性，企业主看不到需求，也就减缓了投资计划。而来自经济方面的消息更糟，悲观情绪在企业家和大公司负责人中蔓延，在这种环境下，消费者也害怕失去工作，因此尽量减少支出和负债。</p><p>因此从央行取得的新资金，并没有用于投资或消费，那钱去了哪里呢？按照目前的官方表态，今年创立科创板，多次提到A股目前处于较低估值范围，官媒各方面报道A股，优化当前证券投资。人都是投机的心理，钱只会流到便宜的资产上，当前上证指数<strong>2880.33</strong>。假如钱真的流入股票市场，证券交易所的指数会上涨，比年前的<strong>2440</strong>有一点上涨。尽管来自经济面的消息仍然很糟，而且企业的获利和红利下降，而这一过程还有可能持续一年多的时间。进入慢牛状态。</p><p>只有当经济形势逐渐好转，投资和消费才会增加，同时也会带动企业获利。如果经济发展适度，不发生严重的通货膨胀，央行并不会马上去杠杆（提高利率），而是让利率维持低水准，以免影响经济增长。在这个阶段，直接投资和消费也不会占据全部资金，因此还有流动资金进入证券市场。随着引入注目的企业获利，股票指数继续上涨，这时基本面也看好。引起投资人对股票指数的幻想。让行情迅速看涨。进入疯牛状态。</p><p>繁荣伴随着危机，危机伴随着机会。</p><p>王書與</p><p>二零一九年八月二十一號</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;各种数据显示当前经济处于衰退或停滞，央行最后会降低利率，令企业或企业家以比较优惠的方式贷款，此时企业负责人会计划新的投资。同样地，如果普通消费者支付的贷款利率也变低，他们便愿意贷款来买房子（&lt;strong&gt;注：官方多次提到房产不作为短期刺激经济手段&lt;/strong&gt;）、汽车
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>面试总结</title>
    <link href="https://karmalove.github.io/2019/08/06/android-meet/"/>
    <id>https://karmalove.github.io/2019/08/06/android-meet/</id>
    <published>2019-08-06T09:14:57.000Z</published>
    <updated>2019-08-06T09:19:20.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试总结"><a href="#面试总结" class="headerlink" title="面试总结"></a>面试总结</h1><h2 id="Java方面"><a href="#Java方面" class="headerlink" title="Java方面"></a>Java方面</h2><h3 id="1-HashMap和HashTable的区别"><a href="#1-HashMap和HashTable的区别" class="headerlink" title="1.HashMap和HashTable的区别"></a>1.HashMap和HashTable的区别</h3><blockquote><p>通过HashMap和HashTable的源码去分析  </p></blockquote><h3 id="2-Java垃圾回收机制"><a href="#2-Java垃圾回收机制" class="headerlink" title="2.Java垃圾回收机制"></a>2.Java垃圾回收机制</h3><blockquote><p>理解JVM，内存划分———方法区、内存栈、【虚拟机栈、本地方法栈、程序计数器（线程私有）】。<br>理解回收算法：标记清除算法、可达性分析算法、标记整理算法、复制算法、分代算法  </p></blockquote><h3 id="3-类加载机制"><a href="#3-类加载机制" class="headerlink" title="3.类加载机制"></a>3.类加载机制</h3><blockquote><p>涉及热修复相关问题  </p></blockquote><h3 id="4-线程和线程池、并发、锁等一系列问题"><a href="#4-线程和线程池、并发、锁等一系列问题" class="headerlink" title="4.线程和线程池、并发、锁等一系列问题"></a>4.线程和线程池、并发、锁等一系列问题</h3><blockquote><p>如何自定义一个线程池？  </p></blockquote><h3 id="5-弱引用、软引用区别"><a href="#5-弱引用、软引用区别" class="headerlink" title="5.弱引用、软引用区别"></a>5.弱引用、软引用区别</h3><h3 id="6-int、Integer区别"><a href="#6-int、Integer区别" class="headerlink" title="6.int、Integer区别"></a>6.int、Integer区别</h3><blockquote><p>主要考值传递和引用传递问题  </p></blockquote><h3 id="7-手写设计模式"><a href="#7-手写设计模式" class="headerlink" title="7.手写设计模式"></a>7.手写设计模式</h3><blockquote><p>1.单例模式<br>2.生产者/消费者模式<br>3.观察者模式<br>4.适配器模式<br>5.策略模式<br>6.建造者模式+工厂模式<br>7.MVC、MVP、MVVM区别  </p></blockquote><h3 id="8-数据结构"><a href="#8-数据结构" class="headerlink" title="8.数据结构"></a>8.数据结构</h3><blockquote><p>1.平衡二叉树、二叉查找数、红黑树<br>2.HashMap、LinkedHashMap、ConcurrentHashMap，在用法和原理上有什么差异，很多公司会考HashMap原理，通过它做一些扩展，比如中国13亿人口年龄的排序问题，年龄对应桶的个数，年龄相同和hash相同问题类似。<br>3.ArrayList和LinkedList的区别<br>4..Set原理，这个和HashMap考得有点类似，考hash算法相关，被问到过常用hash算法。HashSet内部用到了HashMap  </p></blockquote><h3 id="9-算法"><a href="#9-算法" class="headerlink" title="9.算法"></a>9.算法</h3><hr><h2 id="Android方面"><a href="#Android方面" class="headerlink" title="Android方面"></a>Android方面</h2><h3 id="1-activity、service、fragment、BroadcastReceiver相关知识点"><a href="#1-activity、service、fragment、BroadcastReceiver相关知识点" class="headerlink" title="1.activity、service、fragment、BroadcastReceiver相关知识点"></a>1.activity、service、fragment、BroadcastReceiver相关知识点</h3><h3 id="2-自定义view"><a href="#2-自定义view" class="headerlink" title="2.自定义view"></a>2.自定义view</h3><h3 id="3-事件分发机制"><a href="#3-事件分发机制" class="headerlink" title="3.事件分发机制"></a>3.事件分发机制</h3><h3 id="4-消息分发机制"><a href="#4-消息分发机制" class="headerlink" title="4.消息分发机制"></a>4.消息分发机制</h3><h3 id="5-Binder机制，进程通信"><a href="#5-Binder机制，进程通信" class="headerlink" title="5.Binder机制，进程通信"></a>5.Binder机制，进程通信</h3><h3 id="6-动态权限适配、换肤实现原理"><a href="#6-动态权限适配、换肤实现原理" class="headerlink" title="6.动态权限适配、换肤实现原理"></a>6.动态权限适配、换肤实现原理</h3><h3 id="7-SharedPreference实现原理，能否跨进程？"><a href="#7-SharedPreference实现原理，能否跨进程？" class="headerlink" title="7.SharedPreference实现原理，能否跨进程？"></a>7.SharedPreference实现原理，能否跨进程？</h3><h3 id="8-性能优化问题"><a href="#8-性能优化问题" class="headerlink" title="8.性能优化问题"></a>8.性能优化问题</h3><h4 id="8-1、UI优化"><a href="#8-1、UI优化" class="headerlink" title="8.1、UI优化"></a>8.1、UI优化</h4><h4 id="8-2、内存优化"><a href="#8-2、内存优化" class="headerlink" title="8.2、内存优化"></a>8.2、内存优化</h4><h4 id="8-3、响应速度优化"><a href="#8-3、响应速度优化" class="headerlink" title="8.3、响应速度优化"></a>8.3、响应速度优化</h4><h4 id="8-4、其他性能优化"><a href="#8-4、其他性能优化" class="headerlink" title="8.4、其他性能优化"></a>8.4、其他性能优化</h4><h3 id="9-网络框架OkHttp、Retrofit的实现原理"><a href="#9-网络框架OkHttp、Retrofit的实现原理" class="headerlink" title="9.网络框架OkHttp、Retrofit的实现原理"></a>9.网络框架OkHttp、Retrofit的实现原理</h3><h3 id="11-线程切换框架RxJava的实现原理"><a href="#11-线程切换框架RxJava的实现原理" class="headerlink" title="11.线程切换框架RxJava的实现原理"></a>11.线程切换框架RxJava的实现原理</h3><h3 id="12-消息通知EventBus的实现原理"><a href="#12-消息通知EventBus的实现原理" class="headerlink" title="12.消息通知EventBus的实现原理"></a>12.消息通知EventBus的实现原理</h3><h3 id="13-图片加载库（Fresco、Glide、Picasso）实现原理"><a href="#13-图片加载库（Fresco、Glide、Picasso）实现原理" class="headerlink" title="13.图片加载库（Fresco、Glide、Picasso）实现原理"></a>13.图片加载库（Fresco、Glide、Picasso）实现原理</h3><h3 id="14-消息推送PUSH原理"><a href="#14-消息推送PUSH原理" class="headerlink" title="14.消息推送PUSH原理"></a>14.消息推送PUSH原理</h3><h3 id="15-TCP-IP、Http-Https、Socket的原理"><a href="#15-TCP-IP、Http-Https、Socket的原理" class="headerlink" title="15.TCP/IP、Http/Https、Socket的原理"></a>15.TCP/IP、Http/Https、Socket的原理</h3><h3 id="16-热更新、热修复、插件化"><a href="#16-热更新、热修复、插件化" class="headerlink" title="16.热更新、热修复、插件化"></a>16.热更新、热修复、插件化</h3><h3 id="17-Flutter、Kotlin、rn的学习"><a href="#17-Flutter、Kotlin、rn的学习" class="headerlink" title="17.Flutter、Kotlin、rn的学习"></a>17.Flutter、Kotlin、rn的学习</h3><h3 id="18-Git的相关操作"><a href="#18-Git的相关操作" class="headerlink" title="18.Git的相关操作"></a>18.Git的相关操作</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;面试总结&quot;&gt;&lt;a href=&quot;#面试总结&quot; class=&quot;headerlink&quot; title=&quot;面试总结&quot;&gt;&lt;/a&gt;面试总结&lt;/h1&gt;&lt;h2 id=&quot;Java方面&quot;&gt;&lt;a href=&quot;#Java方面&quot; class=&quot;headerlink&quot; title=&quot;Java方
      
    
    </summary>
    
    
      <category term="android" scheme="https://karmalove.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android异步消息处理机制分析</title>
    <link href="https://karmalove.github.io/2019/07/30/Android%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E5%88%86%E6%9E%90/"/>
    <id>https://karmalove.github.io/2019/07/30/Android异步消息处理机制分析/</id>
    <published>2019-07-30T04:23:34.000Z</published>
    <updated>2019-07-30T04:25:30.555Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android异步消息处理机制分析"><a href="#Android异步消息处理机制分析" class="headerlink" title="Android异步消息处理机制分析"></a>Android异步消息处理机制分析</h1><blockquote><p>异步消息处理线程启动后会进入一个无限的循环体中，每循环一次，从内部的消息队列中取出一个消息，然后回调相应的消息处理函数，执行完成一个消息后则继续循环。若消息队列为空，线程则会阻塞等待。。。。。。  </p></blockquote><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><blockquote><p>异步消息处理机制涉及到主要三个类<code>Handler</code>、<code>Looper</code>、<code>Message</code>，其中Looper负责创建一个消息队列<code>MessageQueue</code>，然后进入一个无限循环体<code>Loop</code>中不断从该<code>MessageQueue</code>中读取信息，消息的创建者就是单个或多个<code>Handler</code>  </p></blockquote><h3 id="1-Looper"><a href="#1-Looper" class="headerlink" title="1.Looper"></a>1.Looper</h3><ul><li>对于Looper主要是prepare()和loop()这两个方法<ul><li>首先看prepare()方法的实现<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static final void prepare()&#123;</span><br><span class="line">if(sThreadLocal.get()!=null)&#123;</span><br><span class="line">            throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</span><br><span class="line">&#125;</span><br><span class="line">sThreadLocal.set(new Looper(true));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong> sThreadLocal是一个ThreadLocal对象，它可以在一个线程中存储变量。可以看到上面的代码将一个Looper实例set入ThreadLocal，并且判断了Loop实例是否为null，否则抛出异常。这说明了Looper.prepare()方法不能调用两次，同时也保证了一个线程中只有一个Looper实例 </strong></p><pre><code>* 再看一下Looper的构造方法实现</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android异步消息处理机制分析&quot;&gt;&lt;a href=&quot;#Android异步消息处理机制分析&quot; class=&quot;headerlink&quot; title=&quot;Android异步消息处理机制分析&quot;&gt;&lt;/a&gt;Android异步消息处理机制分析&lt;/h1&gt;&lt;blockquote&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2019年讀書清單</title>
    <link href="https://karmalove.github.io/2019/06/26/2019-book/"/>
    <id>https://karmalove.github.io/2019/06/26/2019-book/</id>
    <published>2019-06-26T07:08:41.000Z</published>
    <updated>2019-06-26T07:20:44.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019年讀書清單"><a href="#2019年讀書清單" class="headerlink" title="2019年讀書清單"></a>2019年讀書清單</h2><ul><li><p>《期權投資策略》</p></li><li><p>《偉大的博弈 華爾街金融帝國的崛起》</p></li><li><p>《戰勝一切市場的人》</p></li><li><p>《投資最重要的事》</p></li><li><p>《債務危機》</p></li><li><p>《原則》</p></li><li><p>《一個投機者的告白》</p></li><li><p>《逃不開的經濟週期：歷史，理論與投資現實》</p></li><li><p>《濤動週期論 經濟週期決定人生財富的命運》</p></li><li><p>《乾隆時代的得與失》</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2019年讀書清單&quot;&gt;&lt;a href=&quot;#2019年讀書清單&quot; class=&quot;headerlink&quot; title=&quot;2019年讀書清單&quot;&gt;&lt;/a&gt;2019年讀書清單&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;《期權投資策略》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;《偉大的博弈 
      
    
    </summary>
    
    
      <category term="Book" scheme="https://karmalove.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>投資反思</title>
    <link href="https://karmalove.github.io/2019/06/26/thinking/"/>
    <id>https://karmalove.github.io/2019/06/26/thinking/</id>
    <published>2019-06-26T06:48:33.000Z</published>
    <updated>2019-06-26T07:08:15.700Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如何從市場中那麼多人勝出？和別人的不同想法，比別人思考得更多，嚴格執行制訂的策略。</p></blockquote><h3 id="投資最重要的事"><a href="#投資最重要的事" class="headerlink" title="投資最重要的事"></a>投資最重要的事</h3><ul><li>學習第二層思維</li><li>理解市場有效性及局限性</li><li>準確估計資產價值</li><li>價格與價值的關係</li><li>理解風險</li><li>識別風險</li><li>控制風險</li><li>關注週期</li><li>鐘擺意識</li><li>抵禦消極影響</li><li>逆向投資</li><li>尋找便宜貨</li><li>耐心等待機會</li><li>認識預測的局限性</li><li>正確認識自身</li><li>重視運氣</li><li>多元化投資</li><li>避免錯誤</li><li>增值的意義</li><li>合理預期</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如何從市場中那麼多人勝出？和別人的不同想法，比別人思考得更多，嚴格執行制訂的策略。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;投資最重要的事&quot;&gt;&lt;a href=&quot;#投資最重要的事&quot; class=&quot;headerlink&quot; title=&quot;投資
      
    
    </summary>
    
    
      <category term="Thinking" scheme="https://karmalove.github.io/tags/Thinking/"/>
    
  </entry>
  
  <entry>
    <title>Python3.5安装requests错误</title>
    <link href="https://karmalove.github.io/2019/06/17/pip-install-fail/"/>
    <id>https://karmalove.github.io/2019/06/17/pip-install-fail/</id>
    <published>2019-06-17T10:19:00.000Z</published>
    <updated>2019-06-18T02:11:07.332Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Python3-5安装requests错误"><a href="#Python3-5安装requests错误" class="headerlink" title="Python3.5安装requests错误"></a>Python3.5安装requests错误</h4><figure class="highlight plain"><figcaption><span>not find a version that satisfies the requirement requests (from versions: ) No matching ......```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 解决方案</span><br><span class="line">* 更新pip</span><br><span class="line">    * Python2.7更新方法:</span><br><span class="line">    </span><br><span class="line">    ```python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure><pre><code>* Python3.5更新方法:<figure class="highlight plain"><figcaption><span>-m pip install --upgrade pip```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* Python国内网络问题，选择国内的镜像源来加速</span><br><span class="line">```pip install 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com</span><br></pre></td></tr></table></figure></code></pre><p>这个是豆瓣源<br><code>--trusted-host pypi.douban.com</code>这是为了获得ssl证书的认证，要不然会报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Python3-5安装requests错误&quot;&gt;&lt;a href=&quot;#Python3-5安装requests错误&quot; class=&quot;headerlink&quot; title=&quot;Python3.5安装requests错误&quot;&gt;&lt;/a&gt;Python3.5安装requests错误&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>無財作力，少有鬥智，既饒爭時，此其大經也</title>
    <link href="https://karmalove.github.io/2019/06/11/wucai/"/>
    <id>https://karmalove.github.io/2019/06/11/wucai/</id>
    <published>2019-06-11T06:17:10.000Z</published>
    <updated>2019-06-11T07:08:50.023Z</updated>
    
    <content type="html"><![CDATA[<p> 之前常常思考一个问题，一个家庭条件一般的人靠自己的努力究竟有多大概率实现财务自由，暂且将财务自由的标准设定为一線城市有车有房无负债，账户里有2000万元人民币现金。不考虑未来通胀的影响，如果不是天天换跑车玩票的话，这个规模的资产应该在中国大部分地方都可以算得上财务自由了。<br> 以身边朋友为例，90%算得上是名校研究生毕业（不是在吹牛，高中两届同学100多个人，最差的本科大概就是大连理工、华北电力之类的），同学大多为普通人家的孩子，且分布在各行各业，很有代表性。上一届同学已经开始工作，毕业之后起薪4万~50万不等，年薪不到10万的同学大多是本科毕业回家乡那边工作，如果没有什么奇遇的话，估计此生很难实现财务自由，所以现实就是这么残酷，可能年轻时的一个选择就会使你走向另一条路。当然人生的风景有很多，回家过得幸福也令人羡慕，此处只讨论最俗的财富积累，不谈人生选择。排除掉10万以下的，也要把50万的排除，那货北大光华毕业，太特殊，我估计他只要正常工作，过个十几年单凭工资就能实现财务自由。剩下的第一年年薪中位数大概在15万左右，起步工资大家都差不多，但十年之后差别就会非常明显，一些努力的或者是人生际遇好的年薪过百万应该没任何问题，我判断这样的同学在一线城市的概率会更大一些，毕竟机会更多，但即使在一线城市，除非自己创业，否则也只能是保持现金流稳定，资产不会太多。<br> 从企业获得的报酬天花板很明显，到一定程度之后再往上升就难了，一些发展前景不好的传统行业可能工资达到30-40万就卡住了。所以普通人想要获得财务自由，难度还是非常大的，不仅仅需要一直努力提升自己的实力，还要在恰当的时机进行有风险的重大判断，而且还要判断正确。题目中的“无财作力，少有斗智，既饶争时”出自《史记·货殖列传》，可以简单解释为在你无产时只能靠体力去赚钱，在你少产时就要靠智力去赚钱，在你财力雄厚的时候就要靠对时机的把握来赚钱。这也是普通人取得财务自由最容易实现的途径，年轻时通过努力工作升职加薪，工作十年八年之后，需要通过资源、智力使得待遇突破瓶颈，上升到另一个高度，但这还不够，也只能使你实现超市自由。资产的大幅度增值要么是靠风险，要么靠资源，单靠智力和运气的人凤毛麟角，靠资源不用多说，靠风险的话一些胆子大的十年前多买几套房子，如今单靠房租就自由了，也有的通过股市或者期货加杠杆，一夜暴富。之前一直不信有这样的人，直到朋友说学院的一个博士通过信用卡套了50万，这轮牛市至今干到1000万，他亲眼看过账户之后终于是信了。财富呈聚集效应，或者说马太效应，少的越来越少，多的越来越多，这哥们短短两年时间就进入了财务自由的门槛，实在令人羡慕。<br> 那么问题来了，现在一穷二白，还不知道能找到什么样工作的我，该如何规划接下来这十几年，才能在40岁之前实现财务自由呢？暂且列一个大方向的规划吧，第一步：无财作力。找到一个好工作，进入一个前景广阔的行业，以目前来看，进入金融行业问题不大，最差也能找个私募混混，只是后期风险会更大，不如券商那么稳，但这不是我能决定的。第二步：少有斗智。努力工作十年，使得薪酬待遇大幅度提升，这一点受影响因素较多，很可能受到一些客观因素影响无法保持长期的努力，或者说运气不佳，努力之后没达到理想效果，对这点只能尽人事听天命。第三步：既饶争时。通过二级市场将稳定的现金流转化为资产的不断增值，这步是最重要的一步，一招棋错，可能导致满盘皆输。幸运的是我和朋友已经在年轻时建立了成熟、完善的投资体系，阿狗的系统回测7年20倍，即使未来十几年最终系统失效，完全不赚钱甚至赔钱，但只要我们不加杠杆，不搞期货，肯定是不会死在市场里的，这也是三轮股灾给我们最好的财富。二十年后最终的结果估计有三种：第一种，这三步进行的都比较顺利，那我们40岁之前就能实现财务自由；第二种，前两步走的一般，财务自由的时间就会推迟一些年；第三种，第三步走错，此生财务自由无望。如果中国像日本那样20年经济不增长，出现了传说中的“消失的二十年”，那我的梦也就不用再做了。<br> 现在越发不敢在朋友圈发一些中二的状态了，加的人太杂，我又懒得分组，只能通过豆瓣偶尔意淫，小撸怡情，也算是个梳理自己思想的过程。今年25岁了，之前的人生可以说是屡战屡败，幸运的是我内心还能保持热血，保持中二，屡败屡战，不管龙还在不在，骑士都在燃烧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 之前常常思考一个问题，一个家庭条件一般的人靠自己的努力究竟有多大概率实现财务自由，暂且将财务自由的标准设定为一線城市有车有房无负债，账户里有2000万元人民币现金。不考虑未来通胀的影响，如果不是天天换跑车玩票的话，这个规模的资产应该在中国大部分地方都可以算得上财务自由了。
      
    
    </summary>
    
    
      <category term="trading" scheme="https://karmalove.github.io/tags/trading/"/>
    
  </entry>
  
  <entry>
    <title>Trading_diary</title>
    <link href="https://karmalove.github.io/2019/05/30/Trading-diary/"/>
    <id>https://karmalove.github.io/2019/05/30/Trading-diary/</id>
    <published>2019-05-30T06:43:44.000Z</published>
    <updated>2019-06-28T05:50:55.534Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019年05月29日"><a href="#2019年05月29日" class="headerlink" title="2019年05月29日"></a>2019年05月29日</h3><blockquote><p>買入PDD，買入理由：近段時間底部<br>買入NIO，買入理由：歷史最低價格，但是感覺還不是最底部。</p></blockquote><h3 id="2019年05月30日"><a href="#2019年05月30日" class="headerlink" title="2019年05月30日"></a>2019年05月30日</h3><blockquote><p>沒有交易，NIO果然跌了10%，又一次抄在半山腰，昨天判斷它會跌是因為財報利好消息影響股價不大，不斷有大單流出。<br>PDD還是在那個區間震蕩。</p></blockquote><h3 id="2019年05月31日"><a href="#2019年05月31日" class="headerlink" title="2019年05月31日"></a>2019年05月31日</h3><blockquote><p>没有交易，盘后时候冲动想买NIO、UXIN、TIGER。生怕错过历史最低位，其实这样的投资心理是不对的。大环境一天不稳定，都不是反弹的时候</p></blockquote><h3 id="2019年06月03日"><a href="#2019年06月03日" class="headerlink" title="2019年06月03日"></a>2019年06月03日</h3><blockquote><p>買入NIO,覺得它會跌還是繼續買入，不知道是什麼原因，股價不斷創歷史新低。其他股票也是歷史最低了，例如TIGER，大環境不好的情況下，不要覺得它已經是底部了，沒有更低只有最低。只能採取分批入貨的策略，因為無法預測最底部。剩下能做的事情唯有等了。</p></blockquote><h3 id="2019年06月04日"><a href="#2019年06月04日" class="headerlink" title="2019年06月04日"></a>2019年06月04日</h3><blockquote><p>沒有交易，美聯儲主席鮑威爾發表講話，暗示有降息的可能，推動股市上漲。</p></blockquote><h3 id="2019年06月05日"><a href="#2019年06月05日" class="headerlink" title="2019年06月05日"></a>2019年06月05日</h3><blockquote><p>沒有交易，小非農數據不及預期，中概股普遍跌，昨天賺的兩千多刀，今晚又全部虧回去。</p></blockquote><h3 id="2019年06月06日"><a href="#2019年06月06日" class="headerlink" title="2019年06月06日"></a>2019年06月06日</h3><blockquote><p>沒有交易，中概股普遍跌</p></blockquote><h3 id="2019年06月07日"><a href="#2019年06月07日" class="headerlink" title="2019年06月07日"></a>2019年06月07日</h3><blockquote><p>沒有交易，美國大非農數據遠不及預期，市場認為美聯儲降息幾率大增，美股指數高開</p></blockquote><h3 id="2019年06月10日"><a href="#2019年06月10日" class="headerlink" title="2019年06月10日"></a>2019年06月10日</h3><blockquote><p>沒有交易，美墨達成貿易協議，不征收關稅，美股指數高開。優信二手車盤前發佈財報，盤前高開13%，開盤后一度跌7%。NIO跌6個點，繼續深套。</p></blockquote><h3 id="2019年06月11日"><a href="#2019年06月11日" class="headerlink" title="2019年06月11日"></a>2019年06月11日</h3><blockquote><p>沒有交易，掛2.54買入NIO，沒有成交。大盤都在跌。</p></blockquote><h3 id="2019年06月12日"><a href="#2019年06月12日" class="headerlink" title="2019年06月12日"></a>2019年06月12日</h3><blockquote><p>掛2.53買入NIO-1000股，跌到2.50。一直在这个区间横盘</p></blockquote><h3 id="2019年06月13日"><a href="#2019年06月13日" class="headerlink" title="2019年06月13日"></a>2019年06月13日</h3><blockquote><p>掛4.3買入TIGER成交220股，剩下的沒有成交</p></blockquote><h3 id="2019年06月14日"><a href="#2019年06月14日" class="headerlink" title="2019年06月14日"></a>2019年06月14日</h3><blockquote><p>没有交易，TIGER历史新低4.09，NIO再次出现自燃事件，也是历史新低4.3.中概股普跌。</p></blockquote><h3 id="2019年06月17日"><a href="#2019年06月17日" class="headerlink" title="2019年06月17日"></a>2019年06月17日</h3><blockquote><p>没有交易，TIGER盤中拉升35%，要研究總結一下是什麼情況下拉？美股普漲。繼續關注美聯儲會議講話。</p></blockquote><h3 id="2019年06月18日"><a href="#2019年06月18日" class="headerlink" title="2019年06月18日"></a>2019年06月18日</h3><blockquote><p>沒有交易，TIGER跌4.51%，HUYA拉升9.55%，達到預期目標，要開始注意風險了。因為普習通話，中概股普遍漲，美股三大指數齊升。</p></blockquote><h3 id="2019年06月19日"><a href="#2019年06月19日" class="headerlink" title="2019年06月19日"></a>2019年06月19日</h3><blockquote><p>沒有交易，美聯儲發表講話，把”耐心”刪除，預計7月份降息。美股三大指數繼續上升。</p></blockquote><h3 id="2019年06月20日"><a href="#2019年06月20日" class="headerlink" title="2019年06月20日"></a>2019年06月20日</h3><blockquote><p>沒有交易，整體沒有什麼波動。</p></blockquote><h3 id="2019年06月21日"><a href="#2019年06月21日" class="headerlink" title="2019年06月21日"></a>2019年06月21日</h3><blockquote><p>沒有交易，整體低迷。虧損中</p></blockquote><h3 id="2019年06月24日"><a href="#2019年06月24日" class="headerlink" title="2019年06月24日"></a>2019年06月24日</h3><blockquote><p>賣出TSLA，根據交易量判斷短期會回調，所以賣出。</p></blockquote><h3 id="2019年06月25日"><a href="#2019年06月25日" class="headerlink" title="2019年06月25日"></a>2019年06月25日</h3><blockquote><p>沒有交易，美股全線下跌，中概股也是跌。HUYA跌9%，空池剩餘65萬。為什麼每次升完都要跌，要好好找一下規律才行。</p></blockquote><h3 id="2019年06月26日"><a href="#2019年06月26日" class="headerlink" title="2019年06月26日"></a>2019年06月26日</h3><blockquote><p>買入20190719 jd 29 put option。有點貿然行動，買入太早。</p></blockquote><h3 id="2019年06月27日"><a href="#2019年06月27日" class="headerlink" title="2019年06月27日"></a>2019年06月27日</h3><blockquote><p>盤前2.5買入NIO 1000股，NIO電池問題，宣佈召回計劃，利空消息開盤跌，後面升了。說明股價穩定了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;2019年05月29日&quot;&gt;&lt;a href=&quot;#2019年05月29日&quot; class=&quot;headerlink&quot; title=&quot;2019年05月29日&quot;&gt;&lt;/a&gt;2019年05月29日&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;買入PDD，買入理由：近段時間底部&lt;br&gt;
      
    
    </summary>
    
    
      <category term="trading" scheme="https://karmalove.github.io/tags/trading/"/>
    
  </entry>
  
  <entry>
    <title>交易总结</title>
    <link href="https://karmalove.github.io/2019/05/27/tran/"/>
    <id>https://karmalove.github.io/2019/05/27/tran/</id>
    <published>2019-05-27T08:35:54.000Z</published>
    <updated>2019-05-30T07:09:14.714Z</updated>
    
    <content type="html"><![CDATA[<h2 id="交易总结"><a href="#交易总结" class="headerlink" title="交易总结"></a>交易总结</h2><blockquote><p>所谓顺势只是伪命题，这是分析师的语言，交易者语言里只有规则，让错误的单子尽可能少亏，让正确的单子尽可能多赚</p></blockquote><blockquote><p>很大一部分交易者之所以迷茫，正因为他们总是在寻找一些确定的东西，因为人对于不确定的事情是没有安全感的，但事实上，投机市场里面没有任何东西都是确定的，任何一个交易方法表面上看起来可能很简单，执行下去就可以了，但事实上并非如此，这里面包含很多交易者独特的属性在里面，他的知识结构，他的习惯，他的性格，他在交易中所经历的很多事情，这些都是交易的一部分。那么，即使告诉你一个方法，我用起来可能赚钱，但是你用它做单可能会亏损，因为很多在我看来是常识或者习惯的东西，而你不具备，我们的经历和认知是完全不一样的。所以，构成交易体系的工作只得靠自己。</p></blockquote><h3 id="如何一步步构建属于自己的规则？"><a href="#如何一步步构建属于自己的规则？" class="headerlink" title="如何一步步构建属于自己的规则？"></a>如何一步步构建属于自己的规则？</h3><blockquote><p>学会每天总结交易的得失，收盘后根据交易的明细总结，失败的单子为什么失败？如何处理才能亏损最小化？成功的单子为什么成功？如何处理才能利益最大化？学会写交易日记，把这些总结用文字记下来，方便以后查看。<br>成功的一部分可以copy，错误的事情不能一而再再而三的去犯错。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;交易总结&quot;&gt;&lt;a href=&quot;#交易总结&quot; class=&quot;headerlink&quot; title=&quot;交易总结&quot;&gt;&lt;/a&gt;交易总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓顺势只是伪命题，这是分析师的语言，交易者语言里只有规则，让错误的单子尽可能少亏，让正确的单子尽
      
    
    </summary>
    
    
      <category term="trading" scheme="https://karmalove.github.io/tags/trading/"/>
    
  </entry>
  
  <entry>
    <title>王賢巧-Android開發工程師簡歷</title>
    <link href="https://karmalove.github.io/2019/03/19/work/"/>
    <id>https://karmalove.github.io/2019/03/19/work/</id>
    <published>2019-03-19T02:30:51.000Z</published>
    <updated>2019-07-18T08:36:09.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="联系方式"><a href="#联系方式" class="headerlink" title="联系方式"></a>联系方式</h1><blockquote><ul><li>Phone：15812869246</li><li>Email：<a href="mailto:1026karma@gmail.com" target="_blank" rel="noopener">1026karma@gmail.com</a></li></ul></blockquote><hr><h1 id="个人信息"><a href="#个人信息" class="headerlink" title="个人信息"></a>个人信息</h1><blockquote><ul><li>王贤巧/男/1993</li><li>3年Android移动开发经验</li><li>本科/广东科技学院计算机系    </li><li>交換生/台灣中國科技大學資訊系</li><li>Blog：<a href="https://karmalove.github.io/">https://karmalove.github.io/</a> </li><li>Github：<a href="https://github.com/karmalove" target="_blank" rel="noopener">https://github.com/karmalove</a></li></ul></blockquote><hr><h1 id="技能清单"><a href="#技能清单" class="headerlink" title="技能清单"></a>技能清单</h1><blockquote><ul><li>熟悉 Android 应用框架设计，熟悉 Android 高性能编程及调优、熟悉多线程编程，熟练使用 AsyncTask，用多线程技术优化性能</li><li>熟悉蓝牙 ble 技术开发、了解 Android FFmpeg 视频压缩、视频直播</li><li>熟练使用 MVP 和 MVC、Retrofit 和 RxAndroid、RxJava、dageer2</li><li>熟悉 Android 事件分发机制、自定义控件、RecycleView 的使用、代码混淆和反编译 apk</li><li>熟悉 Android 的网络通信技术，对 http、https 和 socket 通信有一定的了解</li><li>了解常用的设计模式、熟练使用 Git、Svn、Jenkins</li><li>熟悉 Python、JavaScript、HTML、css</li><li>接触过flutter、React Native、kotlin</li></ul></blockquote><hr><h1 id="工作经历"><a href="#工作经历" class="headerlink" title="工作经历"></a>工作经历</h1><h2 id="深圳市三体科技有限公司（2017-9-至今"><a href="#深圳市三体科技有限公司（2017-9-至今" class="headerlink" title="深圳市三体科技有限公司（2017/9~至今)"></a>深圳市三体科技有限公司（2017/9~至今)</h2><h4 id="点愿项目"><a href="#点愿项目" class="headerlink" title="点愿项目"></a><a href="https://sj.qq.com/myapp/detail.htm?apkName=com.dykj.wishshare" target="_blank" rel="noopener">点愿</a>项目</h4><p>   （项目简介：一款在线\下载看视频APP）</p><blockquote><ul><li>独立开发点愿Android客户端</li><li>播放器基于ijkplayer进行开发</li><li>IM功能基于融云IM库进行开发</li><li>视频（上传/下载）断点续传基于OKhttp和rxjava进行开发</li><li>视频磁力链接下载技术基于反编译迅雷so开发</li><li>推送功能集成（小米、华为、魅族、友盟、FCM）</li><li>爬虫功能基于jsoup、htmlcleaner解析</li><li>广告模块接入广点通、今日头条和自己公司广告模块</li><li>使用热修复技术在线更新</li></ul></blockquote><h4 id="点传项目"><a href="#点传项目" class="headerlink" title="点传项目"></a><a href="https://sj.qq.com/myapp/detail.htm?apkName=com.stkj.android.wifishare" target="_blank" rel="noopener">点传</a>项目</h4><p>  （项目简介：基于WiFi热点点对点传输文件APP）</p><blockquote><ul><li>负责加入广告模块</li><li>负责接入推送</li></ul></blockquote><h4 id="一键换机项目"><a href="#一键换机项目" class="headerlink" title="一键换机项目"></a><a href>一键换机</a>项目</h4><p>  （项目简介：基于WiFi-direct技术传输文件APP）</p><blockquote><ul><li>负责部分UI开发</li><li>负责传输逻辑处理</li><li>负责接入推送（阿里推送、华为推送）</li></ul></blockquote><hr><h2 id="深圳市黑漂科技有限公司（2016-7-2017-5"><a href="#深圳市黑漂科技有限公司（2016-7-2017-5" class="headerlink" title="深圳市黑漂科技有限公司（2016/7~2017/5)"></a>深圳市黑漂科技有限公司（2016/7~2017/5)</h2><h4 id="黑漂钓鱼项目"><a href="#黑漂钓鱼项目" class="headerlink" title="黑漂钓鱼项目"></a><a href="https://sj.qq.com/myapp/detail.htm?apkName=com.heipiao.app.customer" target="_blank" rel="noopener">黑漂钓鱼</a>项目</h4><p>（项目简介：基于用户钓鱼需求开发的钓鱼客户端和钓鱼商家端APP）</p><blockquote><ul><li>独立开发黑漂钓鱼商家版和钓友版Android客户端</li><li>Ubuntu搭建gitlab版本控制服务器</li><li>Jenkins和蒲公英自动打包</li><li>使用MVP+retrofit+rxjava+dagger2开发</li><li>搭建移动端自动化测试Appium平台，用Python编写测试脚本</li></ul></blockquote><hr><h2 id="东莞市猎声电子科技有限公司（2015-6-2016-6"><a href="#东莞市猎声电子科技有限公司（2015-6-2016-6" class="headerlink" title="东莞市猎声电子科技有限公司（2015/6~2016/6)"></a>东莞市猎声电子科技有限公司（2015/6~2016/6)</h2><h4 id="we-playing项目"><a href="#we-playing项目" class="headerlink" title="we playing项目"></a><a href="http://www.liesheng.cc/index.html" target="_blank" rel="noopener">we playing</a>项目</h4><p>（项目简介：Android手机应用和蓝牙耳机通信记录运动数据的APP）</p><blockquote><ul><li>在项目负责蓝牙ble通信开发和地图开发</li><li>历史数据自定义折线图开发</li><li>上传Google play应用市场</li></ul></blockquote><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;联系方式&quot;&gt;&lt;a href=&quot;#联系方式&quot; class=&quot;headerlink&quot; title=&quot;联系方式&quot;&gt;&lt;/a&gt;联系方式&lt;/h1&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Phone：15812869246&lt;/li&gt;
&lt;li&gt;Email：&lt;a href=&quot;m
      
    
    </summary>
    
    
      <category term="個人信息" scheme="https://karmalove.github.io/tags/%E5%80%8B%E4%BA%BA%E4%BF%A1%E6%81%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android OTG开发</title>
    <link href="https://karmalove.github.io/2018/03/19/android/android-otg/"/>
    <id>https://karmalove.github.io/2018/03/19/android/android-otg/</id>
    <published>2018-03-19T02:30:51.000Z</published>
    <updated>2019-03-20T10:20:30.348Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近开发一个APP接触到要跟硬件通过otg通信。Google了一下，发现很少关于这方面的东西，看了一下<a href="https://developer.android.com/guide/topics/connectivity/usb/index.html" target="_blank" rel="noopener">官方文档</a>的介绍</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近开发一个APP接触到要跟硬件通过otg通信。Google了一下，发现很少关于这方面的东西，看了一下&lt;a href=&quot;https://developer.android.com/guide/topics/connectivity/usb/inde
      
    
    </summary>
    
    
      <category term="android" scheme="https://karmalove.github.io/tags/android/"/>
    
      <category term="otg" scheme="https://karmalove.github.io/tags/otg/"/>
    
  </entry>
  
  <entry>
    <title>使用JitPack发布Android开源库</title>
    <link href="https://karmalove.github.io/2017/03/19/jitpack/"/>
    <id>https://karmalove.github.io/2017/03/19/jitpack/</id>
    <published>2017-03-19T10:30:51.000Z</published>
    <updated>2019-03-20T03:23:28.426Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平时我们Android开发的时候，为了不重复造轮子，经常用到第三方开源项目，有了Android studio的Gradle，我们就一句代码就可以依赖远程代码仓库了，这比eclipse方便多了。假如我们也想自己造轮子开源给别人用呢？可以用<strong>JitPack</strong>。比<strong>Maven Central</strong>、<strong>jCenter</strong>简单多了。</p></blockquote><h4 id="JitPack是什么？"><a href="#JitPack是什么？" class="headerlink" title="JitPack是什么？"></a>JitPack是什么？</h4><blockquote><p>JitPack是一个自定义的Maven仓库。</p></blockquote><h4 id="发布步骤"><a href="#发布步骤" class="headerlink" title="发布步骤"></a>发布步骤</h4><h5 id="1-新建一个Android项目"><a href="#1-新建一个Android项目" class="headerlink" title="1.新建一个Android项目"></a>1.新建一个Android项目</h5><ul><li>在Android studio下新建一个AndroidUtil项目</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/915812-025f63f205d3da36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="project" title>                </div>                <div class="image-caption">project</div>            </figure><h5 id="2-在AndroidUtil项目下新建一个library"><a href="#2-在AndroidUtil项目下新建一个library" class="headerlink" title="2.在AndroidUtil项目下新建一个library"></a>2.在AndroidUtil项目下新建一个library</h5><ul><li>新建一个library，名称随便写（你喜欢就好），这个library就是我们要push到JitPack开源的仓库</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/915812-687498a28c301ba6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="library" title>                </div>                <div class="image-caption">library</div>            </figure><ul><li><p>在library的build.gradle下添加以下代码：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.github.dcendents.android-maven'</span>  </span><br><span class="line"><span class="keyword">group</span>=<span class="string">'com.github.YourUsername'</span></span><br></pre></td></tr></table></figure></li><li><p>在AndroidUtil项目下的根目录build.gradle添加以下代码<br>插件版本可以去官网查看，尽量使用最新版本，在AndroidStudio 2.2 之后插件要使用 1.4.1 以上的版本。<br><code>classpath &#39;com.github.dcendents:android-maven-gradle-plugin:1.4.1&#39;</code></p></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/915812-33d2eaa1c6d5a7ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="build" title>                </div>                <div class="image-caption">build</div>            </figure><h5 id="3-提交项目的GitHub"><a href="#3-提交项目的GitHub" class="headerlink" title="3.提交项目的GitHub"></a>3.提交项目的GitHub</h5><p><strong>此处省略一万个字</strong></p><h5 id="4-Release你的仓库或者给你的仓库打一个Tag-重点"><a href="#4-Release你的仓库或者给你的仓库打一个Tag-重点" class="headerlink" title="4.Release你的仓库或者给你的仓库打一个Tag(重点)"></a>4.Release你的仓库或者给你的仓库打一个Tag(重点)</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/915812-d0e273408c18cf62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><h5 id="5-将你的仓库地址提交到JitPack-重点"><a href="#5-将你的仓库地址提交到JitPack-重点" class="headerlink" title="5.将你的仓库地址提交到JitPack(重点)"></a>5.将你的仓库地址提交到JitPack(重点)</h5><ul><li><a href="https://jitpack.io/" target="_blank" rel="noopener">JitPack地址</a></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://upload-images.jianshu.io/upload_images/915812-2ee6782dd8d78dc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png" title>                </div>                <div class="image-caption">image.png</div>            </figure><h5 id="6-将远程仓库接入到项目中"><a href="#6-将远程仓库接入到项目中" class="headerlink" title="6.将远程仓库接入到项目中"></a>6.将远程仓库接入到项目中</h5><ul><li><ol><li>在项目根目录的build.gradle<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>2.在module的build.gradle下<br><code>com.github.KarmaOS:AndroidUtil:v1.0.0</code></p></li></ul><p>[参考文章]<br><a href="http://www.gcssloop.com/course/PublishLibraryByJitPack/" target="_blank" rel="noopener">1</a><br><a href="https://joyrun.github.io/2016/07/21/opensource/" target="_blank" rel="noopener">2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平时我们Android开发的时候，为了不重复造轮子，经常用到第三方开源项目，有了Android studio的Gradle，我们就一句代码就可以依赖远程代码仓库了，这比eclipse方便多了。假如我们也想自己造轮子开源给别人用呢？可以用&lt;stron
      
    
    </summary>
    
    
      <category term="android" scheme="https://karmalove.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://karmalove.github.io/2015/03/19/hello-world/"/>
    <id>https://karmalove.github.io/2015/03/19/hello-world/</id>
    <published>2015-03-19T02:30:51.000Z</published>
    <updated>2019-07-29T07:22:36.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OkHttp源码分析"><a href="#OkHttp源码分析" class="headerlink" title="OkHttp源码分析"></a>OkHttp源码分析</h1><h3 id="需要了解以下三点"><a href="#需要了解以下三点" class="headerlink" title="需要了解以下三点"></a>需要了解以下三点</h3><blockquote><p>1.OkHttp请求流程<br>2.网络请求缓存处理<br>3.连接池  </p></blockquote><h3 id="OkHttp请求get的步骤"><a href="#OkHttp请求get的步骤" class="headerlink" title="OkHttp请求get的步骤"></a>OkHttp请求get的步骤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client=new OkHtppClient();</span><br><span class="line">Request request=new Request.Builder()</span><br><span class="line">.url(url)</span><br><span class="line">.build();</span><br><span class="line">Response responde=client.newCall(request).execute();</span><br></pre></td></tr></table></figure><h4 id="新建OkHttpClient客户端"><a href="#新建OkHttpClient客户端" class="headerlink" title="新建OkHttpClient客户端"></a>新建OkHttpClient客户端</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = new OkHttpClient();</span><br><span class="line"></span><br><span class="line">public OkHttpClient() &#123;</span><br><span class="line">    this(new Builder());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OkHttpClient(Builder builder) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>::可以看到，OkHttpClient使用了建造者模式，builder里面的可配置参数如下::<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">public static final class Builder &#123;</span><br><span class="line">    Dispatcher dispatcher;// 分发器</span><br><span class="line">    @Nullable Proxy proxy;</span><br><span class="line">    List&lt;Protocol&gt; protocols;</span><br><span class="line">    List&lt;ConnectionSpec&gt; connectionSpecs;// 传输层版本和连接协议</span><br><span class="line">    final List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();// 拦截器</span><br><span class="line">    final List&lt;Interceptor&gt; networkInterceptors = new ArrayList&lt;&gt;();</span><br><span class="line">    EventListener.Factory eventListenerFactory;</span><br><span class="line">    ProxySelector proxySelector;</span><br><span class="line">    CookieJar cookieJar;</span><br><span class="line">    @Nullable Cache cache;</span><br><span class="line">    @Nullable InternalCache internalCache;// 内部缓存</span><br><span class="line">    SocketFactory socketFactory;</span><br><span class="line">    @Nullable SSLSocketFactory sslSocketFactory;// 安全套接层socket 工厂，用于HTTPS</span><br><span class="line">    @Nullable CertificateChainCleaner certificateChainCleaner;// 验证确认响应证书 适用 HTTPS 请求连接的主机名。</span><br><span class="line">    HostnameVerifier hostnameVerifier;// 验证确认响应证书 适用 HTTPS 请求连接的主机名。  </span><br><span class="line">    CertificatePinner certificatePinner;// 证书锁定，使用CertificatePinner来约束哪些认证机构被信任。</span><br><span class="line">    Authenticator proxyAuthenticator;// 代理身份验证</span><br><span class="line">    Authenticator authenticator;// 身份验证</span><br><span class="line">    ConnectionPool connectionPool;// 连接池</span><br><span class="line">    Dns dns;</span><br><span class="line">    boolean followSslRedirects; // 安全套接层重定向</span><br><span class="line">    boolean followRedirects;// 本地重定向</span><br><span class="line">    boolean retryOnConnectionFailure;// 重试连接失败</span><br><span class="line">    int callTimeout;</span><br><span class="line">    int connectTimeout;</span><br><span class="line">    int readTimeout;</span><br><span class="line">    int writeTimeout;</span><br><span class="line">    int pingInterval;</span><br><span class="line"></span><br><span class="line">    // 这里是默认配置的构建参数</span><br><span class="line">    public Builder() &#123;</span><br><span class="line">        dispatcher = new Dispatcher();</span><br><span class="line">        protocols = DEFAULT_PROTOCOLS;</span><br><span class="line">        connectionSpecs = DEFAULT_CONNECTION_SPECS;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 这里传入自己配置的构建参数</span><br><span class="line">    Builder(OkHttpClient okHttpClient) &#123;</span><br><span class="line">        this.dispatcher = okHttpClient.dispatcher;</span><br><span class="line">        this.proxy = okHttpClient.proxy;</span><br><span class="line">        this.protocols = okHttpClient.protocols;</span><br><span class="line">        this.connectionSpecs = okHttpClient.connectionSpecs;</span><br><span class="line">        this.interceptors.addAll(okHttpClient.interceptors);</span><br><span class="line">        this.networkInterceptors.addAll(okHttpClient.networkInterceptors);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">## 2.同步请求流程</span><br><span class="line">Response response = client.newCall(request).execute();</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line">* Prepares the &#123;@code request&#125; to be executed at   some point in the future.</span><br><span class="line">*/</span><br><span class="line">@Override public Call newCall(Request request) &#123;</span><br><span class="line">    return RealCall.newRealCall(this, request, false /* for web socket */);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// RealCall为真正的请求执行者</span><br><span class="line">static RealCall newRealCall(OkHttpClient client, Request originalRequest, boolean forWebSocket) &#123;</span><br><span class="line">    // Safely publish the Call instance to the EventListener.</span><br><span class="line">    RealCall call = new RealCall(client, originalRequest, forWebSocket);</span><br><span class="line">    call.eventListener = client.eventListenerFactory().create(call);</span><br><span class="line">    return call;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override public Response execute() throws IOException &#123;</span><br><span class="line">    synchronized (this) &#123;</span><br><span class="line">        // 每个Call只能执行一次</span><br><span class="line">        if (executed) throw new IllegalStateException(&quot;Already Executed&quot;);</span><br><span class="line">        executed = true;</span><br><span class="line">    &#125;</span><br><span class="line">    captureCallStackTrace();</span><br><span class="line">    timeout.enter();</span><br><span class="line">    eventListener.callStart(this);</span><br><span class="line">    try &#123;</span><br><span class="line">        // 通知dispatcher已经进入执行状态</span><br><span class="line">        client.dispatcher().executed(this);</span><br><span class="line">        // 通过一系列的拦截器请求处理和响应处理得到最终的返回结果</span><br><span class="line">        Response result = getResponseWithInterceptorChain();</span><br><span class="line">        if (result == null) throw new IOException(&quot;Canceled&quot;);</span><br><span class="line">        return result;</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e = timeoutExit(e);</span><br><span class="line">        eventListener.callFailed(this, e);</span><br><span class="line">        throw e;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        // 通知 dispatcher 自己已经执行完毕</span><br><span class="line">        client.dispatcher().finished(this);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response getResponseWithInterceptorChain() throws IOException &#123;</span><br><span class="line">    // Build a full stack of interceptors.</span><br><span class="line">    List&lt;Interceptor&gt; interceptors = new ArrayList&lt;&gt;();</span><br><span class="line">    // 在配置 OkHttpClient 时设置的 interceptors；</span><br><span class="line">    interceptors.addAll(client.interceptors());</span><br><span class="line">    // 负责失败重试以及重定向</span><br><span class="line">    interceptors.add(retryAndFollowUpInterceptor);</span><br><span class="line">    // 请求时，对必要的Header进行一些添加，接受响应时，移除必要的Header</span><br><span class="line">    interceptors.add(new BridgeInterceptor(client.cookieJar()));</span><br><span class="line">    // 负责读取缓存直接返回、更新缓存</span><br><span class="line">    interceptors.add(new CacheInterceptor(client.internalCache()));</span><br><span class="line">    // 负责和服务器建立连接</span><br><span class="line">    interceptors.add(new ConnectInterceptor(client));</span><br><span class="line">    if (!forWebSocket) &#123;</span><br><span class="line">        // 配置 OkHttpClient 时设置的 networkInterceptors</span><br><span class="line">        interceptors.addAll(client.networkInterceptors());</span><br><span class="line">    &#125;</span><br><span class="line">    // 负责向服务器发送请求数据、从服务器读取响应数据</span><br><span class="line">    interceptors.add(new CallServerInterceptor(forWebSocket));</span><br><span class="line"></span><br><span class="line">    Interceptor.Chain chain = new RealInterceptorChain(interceptors, null, null, null, 0,</span><br><span class="line">        originalRequest, this, eventListener, client.connectTimeoutMillis(),</span><br><span class="line">        client.readTimeoutMillis(), client.writeTimeoutMillis());</span><br><span class="line"></span><br><span class="line">    // 使用责任链模式开启链式调用</span><br><span class="line">    return chain.proceed(originalRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// StreamAllocation 对象，它相当于一个管理类，维护了服务器连接、并发流</span><br><span class="line">// 和请求之间的关系，该类还会初始化一个 Socket 连接对象，获取输入/输出流对象。</span><br><span class="line">public Response proceed(Request request, StreamAllocation streamAllocation, HttpCodec httpCodec,</span><br><span class="line">  RealConnection connection) throws IOException &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    // Call the next interceptor in the chain.</span><br><span class="line">    // 实例化下一个拦截器对应的RealIterceptorChain对象</span><br><span class="line">    RealInterceptorChain next = new RealInterceptorChain(interceptors, streamAllocation, httpCodec,</span><br><span class="line">        connection, index + 1, request, call, eventListener, connectTimeout, readTimeout,</span><br><span class="line">        writeTimeout);</span><br><span class="line">    // 得到当前的拦截器</span><br><span class="line">    Interceptor interceptor = interceptors.get(index);</span><br><span class="line">    // 调用当前拦截器的intercept()方法，并将下一个拦截器的RealIterceptorChain对象传递下去,最后得到响应</span><br><span class="line">    Response response = interceptor.intercept(next);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    return response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OkHttp源码分析&quot;&gt;&lt;a href=&quot;#OkHttp源码分析&quot; class=&quot;headerlink&quot; title=&quot;OkHttp源码分析&quot;&gt;&lt;/a&gt;OkHttp源码分析&lt;/h1&gt;&lt;h3 id=&quot;需要了解以下三点&quot;&gt;&lt;a href=&quot;#需要了解以下三点&quot; cla
      
    
    </summary>
    
    
      <category term="hexo" scheme="https://karmalove.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
